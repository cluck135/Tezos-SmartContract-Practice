archetype raffle(
  owner        : address,
  jackpot      : tez,
  ticket_price : tez
)

states = 
| Created initial
| Initialised
| Transferred

variable open_buy   : option<date> = none
variable close_buy  : option<date> = none
variable reveal_fee : option<rational> = none
variable chest_time : option<nat> = none

asset player {
  id                : address;
  locked_raffle_key : chest;
  revealed          : bool = false;
}

variable raffle_key : nat = 0

transition initialize(ob: date, cb : date, t: nat, rf: rational) {
  called by owner
  require {
    r0: now <= ob < cb        otherwise "INVALID_OPEN_CLOSE_BUY";
    r2: rf <= 1               otherwise "INVALID_REVEAL_FEE";
    r3: transferred = jackpot otherwise "INVALID_AMOUNT";
  }
  from Created to Initialised with effect {
    open_buy   := some(ob);
    close_buy  := some(cb);
    chest_time := some(t);
    reveal_fee := some(rf);
  }
}

entry buy (lrk : chest) {
  state is Initialised
  constant {
    ob ?is open_buy  otherwise "OPEN_BUY_NOT_SET";
    cb ?is close_buy otherwise "CLOSE_BUY_NOT_SET";
  }
  require {
    r4 : transferred = ticket_price  otherwise "INVALID_TICKET_PRICE";
    r5 : ob < now < cb               otherwise "RAFFLE_CLOSED"
  }
  effect { player.add({ id = caller; locked_raffle_key = lrk }) }
}


entry reveal(addr : address, k : chest_key) {
  state is Initialised
  constant {
    ob ?is open_buy  otherwise "OPEN_BUY_NOT_SET";
    cb ?is close_buy otherwise "CLOSE_BUY_NOT_SET";
    t ?is chest_time otherwise "CHEST_TIME_NOT_SET";
    rf ?is reveal_fee otherwise "REVEAL_FEE_NOT_SET";
  }
  require {
    r6 : cb < now   otherwise "RAFFLE_OPEN";
    r7 : not player[addr].revealed  otherwise "PLAYER_ALREADY_REVEALED"
  }
  effect {
    match open_chest(k, player[addr].locked_raffle_key, t) with
    | left (unlocked) ->
      match unpack<nat>(unlocked) with
      | some(partial_key) ->
        raffle_key += partial_key;
        player[addr].revealed := true
      | none -> player.remove(addr)
      end
    | right(open_error) ->
      if open_error then fail("INVALID_CHEST_KEY")
      else player.remove(addr)
    end;
    transfer (rf * ticket_price) to caller;
  }
}

transition %transfer() {
  constant {
    winner ?is player.nth(raffle_key % player.count())  otherwise "OPEN_BUY_NOT_SET";
  }
  require {
    r8: player.select(the.revealed).count() = player.count() otherwise "EXISTS_NOT_REVEALED"
  }
  from Initialised to Transferred
  with effect {
    transfer balance to winner;
  }
}

